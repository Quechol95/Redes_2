@#include <stdio.h>
@#include <netdb.h> 
@#include <stdlib.h> 
@#include <string.h> 

@#include <sys/socket.h> 
@#include <sys/time.h>
@#include <sys/types.h>
@#include <sys/errno.h>
@#include <unistd.h>
@#include <netinet/in.h>
@#include <arpa/inet.h> 
@#include <unistd.h>
@extern int errno;

@#define PORT            8080 
@#define MAX_LINE 		     120

//***********Secuencia de pruebas
@char buf_tx[] = "Hola servidor, soy un cliente";      
@char buf_rx[100];
 
 
// *************Los clientes se conectan**************************************** 
@int main() 
@{ 
@    int sockfd; 
@    struct sockaddr_in servaddr; 
    
//*************************************Creacion del socked************************
@    sockfd = socket(AF_INET, SOCK_STREAM, 0); 
@    if (sockfd == -1) 
@    { 
@        printf("CLIENTE: Creacion del socket fallida...\n"); 
@        return -1;  
@    } 
@    else
@    {
@        printf("CLIENTE: Socket creado con exito...\n"); 
@    }
    
    
@    memset(&servaddr, 0, sizeof(servaddr));

//****************** Asignacion del puerto y de la ip************************
@    servaddr.sin_family = AF_INET; 
@    servaddr.sin_addr.s_addr =  INADDR_ANY; 
@    servaddr.sin_port = htons(PORT); 
  
//****************** Intentando conectar con el socked************************
@    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) != 0) 
@    { 
@        printf("Conexion con el servidor fallida...\n");  
@        return -1;
@    } 
@    printf("Conectado con el servidor...\n"); 

//*******************Enviando secuencias de prueba*****************************
@    write(sockfd, buf_tx, sizeof(buf_tx));     
@    read(sockfd, buf_rx, sizeof(buf_rx));
@    printf("CLIENTE:Recibido: %s \n", buf_rx);
   
/********************se cierra el socked****************************************
@    close(sockfd); 
@} 
