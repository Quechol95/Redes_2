@#include <unistd.h>  

//**********************socket***********************************************
@#include <netdb.h> 
@#include <netinet/in.h> 
@#include <sys/socket.h> 
@#include <sys/types.h> 
@#include <arpa/inet.h>

//*********************Cadenas y errores**************************************
@#include <errno.h>
@#include <stdio.h> 
@#include <string.h> 

//*********************Parametros del servidor*********************************
@#define SERV_PORT       8080              
@#define BUF_SIZE        100              
@#define BACKLOG         5                 

@int main(int argc, char* argv[])          
@{ 
@    int sockfd, connfd ;  /* listening socket and connection socket file descriptors */
@    unsigned int len;     /* length of client address */
@    struct sockaddr_in servaddr, client; 
    
@    int  len_rx, len_tx = 0;                     /* received and sent length, in bytes */
@    char buff_tx[BUF_SIZE] = "Hola cliente, soy el servidor";
@    char buff_rx[BUF_SIZE];   /* buffers for reception  */
    
     
//**********************************Creacion del socket************************************
@    sockfd = socket(AF_INET, SOCK_STREAM, 0); 
@    if (sockfd == -1) 
@    { 
@        fprintf(stderr, "[SERVIDOR-error]: Creacion del socket fallida. %d: %s \n", errno, strerror( errno ));
@        return -1;
@    } 
@    else
@    {
@        printf("[SERVIDOR]: Socket creado con exito..\n"); 
@    }
    
//*************************************Se limpia la estructura****************************************************
@    memset(&servaddr, 0, sizeof(servaddr));
  
//************************************Asignacion del puerto IP****************************************************
@   servaddr.sin_family      = AF_INET; 
@   servaddr.sin_addr.s_addr = INADDR_ANY; 
@   servaddr.sin_port        = htons(SERV_PORT); 
   
//************************************ Parametros del socket ******************************************************
@    if ((bind(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr))) != 0) 
@    { 
@        fprintf(stderr, "[SERVIDOR-error]: El enlace de socket fallido. %d: %s \n", errno, strerror( errno ));
@        return -1;
@    } 
@    else
@    {
@        printf("[SERVIDOR]: Socket enlazado con exito \n");
@    }
  
//**************************************Se pone a escuchar*****************************************************************
@    if ((listen(sockfd, BACKLOG)) != 0) 
@    { 
@        fprintf(stderr, "[SERVIDOR-error]: Error de escucha del socket. %d: %s \n", errno, strerror( errno ));
@        return -1;
@    } 
@    else
@    {
@        printf("[SERVIDOR]: Escuchando en SERV_PORT %d \n\n", ntohs(servaddr.sin_port) ); 
@    }
@    
@    len = sizeof(client); 
  
//**************************************0Acepta los datos o interactua con ellos********************************************
@      while(1)
@      {
@        connfd = accept(sockfd, (struct sockaddr *)&client, &len); 
@        if (connfd < 0) 
@        { 
@            fprintf(stderr, "[SERVIDOR-error]: Conexion no aceptada. %d: %s \n", errno, strerror( errno ));
@            return -1;
@       } 
@        else
@        {              
@@            while(1) /* read data from a client socket till it is closed */ 
@@            {  

//**************************************Lee el mensaje recivido**********************************************************
@@                len_rx = read(connfd, buff_rx, sizeof(buff_rx));
@@                if(len_rx == -1)
@@                {
@@                    fprintf(stderr, "[SERVIDOR-error]: connfd no se puede leer. %d: %s \n", errno, strerror( errno ));
@@                }
@@                else if(len_rx == 0) /* if length is 0 client socket closed, then exit */
@@                {
@@                    printf("[SERVIDOR]: Socket del cliente cerrado \n\n");
@@                    close(connfd);
@@                    break; 
@@                }
@@                else
@@                {
@@                    write(connfd, buff_tx, strlen(buff_tx));
@@                    printf("[SERVIDOR]: %s \n", buff_rx);
@@                }            
@@            }  
@@        }                      
@@    }    
@} 
